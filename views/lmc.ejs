<!DOCTYPE html>
<html lang="en">
<head>
	<%- include("partials/head") %>
	<link rel="stylesheet" type="text/css" href="styles/lmc.css"/>
	<script src="scripts/lmc.js"></script>
</head>
<body>

	<header>
		<%- include("partials/header") %>
	</header>
	
	<h1><%= title %></h1>

	<main>
		<p>
			The Little Man Computer is a model of a von Neumann architecture computer (the same as most modern computers).
			It is extremely simple, with a small instruction set, so is often used to teach students.
			This model is programmed in machine code, with instructions in base 10.
		</p>
		<h3>How it works & how to program it</h3>
		<p>
			Shown below is the memory (RAM) of the computer.
			It has 99 'slots' which are each able to hold one integer value.
			These values can represent either instructions for the computer, or data put there by the running program.
			The instructions available are known as the processor's instruction set.
			The instruction set for the LMC is tabulated at the bottom of this page for reference.
		</p>
		<p>
		A program can be written for the computer by writing a list of instructions (machine code), ending with <span class="code">000</span> to end the program.
			After writing such a program in the box below, you must load it into memory with the button labeled 'Load'.
			When the computer is started, it runs through the instructions in memory, executing them one by one.
			The processor's 'program counter' (also called the 'instruction pointer') stores the address in memory of the instruction to be executed next.
			Its value can be changed using the branch instructions (<span class="code">6xx</span> - <span class="code">8xx</span> in the table below), which allow for conditional logic and looping.
		</p>
		<p>
			The accumulator is a register which is used to perform arithmetic and store inputs given to the program (using instruction <span class="code">901</span>).
			Values can be loaded into it from memory and vice versa using <span class="code">3xx</span> and <span class="code">5xx</span>.
		</p>
		<p>
			Data can be placed in the memory by providing a line in the machine code which does not represent any instruction.
			The data is placed in the memory at the same position that it appears in the code, and can be pulled into the accumulator with the load command (<span class="code">5xx</span>) as normal.
			You must be careful to prevent data from being executed as an instruction, as doing so will crash the computer.
		</p>
	</main>

	<section>
		<h2>Memory</h2>
		<table id="lmc-memory">
			<tr>
				<th></th>
				<% for (let col = 0; col < 10; col++) { %>
				<th class="code"><%= col %></th>
				<% } %>
			</tr>
			<% for (let row = 0; row < 10; row++) { %>
			<tr>
				<th class="code"><%= row * 10 %></th>
				<% for (let col = 0; col < 10; col++) { %>
				<td>
					<input type="text" class="lmc-memory code" id="lmc-memory-<%= row * 10 + col %>" disabled/>
				</td>
				<% } %>
			</tr>
			<% } %>
		</table>
	</section>

	<section>
		<h2>Configuration</h2>
		<ul class="list-preview">
			<li class="item-preview box-shadow">
				<div>
					<p class="title">Controls</p>
					<button id="lmc-btn-start" class="box-shadow" title="Start execution from the current instruction">Start</button>
					<button id="lmc-btn-stop" class="box-shadow" title="Stop execution">Stop</button>
					<button id="lmc-btn-reset" class="box-shadow" title="Clear the memory and registers">Reset</button>
					<button id="lmc-btn-load" class="box-shadow" title="Load the written machine code into the memory">Load</button>
				</div>
			</li>

			<li class="item-preview box-shadow">
				<div>
					<p class="title">Registers</p>
					<label class="lmc-register-label" for="lmc-program-counter">Program Counter</label>
					<input type="text" class="lmc-register box-shadow code" id="lmc-program-counter" name="lmc-program-counter"/>
					<label class="lmc-register-label" for="lmc-accumulator">Accumulator</label>
					<input type="text" class="lmc-register box-shadow code" id="lmc-accumulator" name="lmc-accumulator"/>
				</div>
			</li>
			<li class="item-preview box-shadow">
				<div>
					<p class="title">Input/Output</p>
					<input type="text" required pattern="^[0-9]+$" placeholder="Input" id="lmc-input" id="lmc-input" class="code box-shadow"/>
					<button id="lmc-btn-input" for="lmc-input" class="box-shadow">Submit</button>
					<textarea id="lmc-output" class="box-shadow code" rows="4" placeholder="Output" disabled></textarea>
				</div>
			</li>
			<li class="item-preview box-shadow">
				<div>
					<p class="title">Machine Code</p>
					<textarea id="lmc-code-input" class="box-shadow code" rows="10" placeholder="Enter machine code here"></textarea>
				</div>
			</li>
		</ul>
	</section>

	<section>
		<h2>Instruction Set</h2>
		<p>This is the set of instructions understood by the LMC.</p>
		<table id="lmc-instructions">
			<tr>
				<th>Instruction</th>
				<th>Assembly Mnemonic</th>
				<th>Description</th>
			</tr>
			<tr>
				<td><span class="code">1xx</span></td>
				<td class="code">ADD</td>
				<td>Add memory address <span class="code">xx</span> to the accumulator</td>
			</tr>
			<tr>
				<td><span class="code">2xx</span></td>
				<td class="code">SUB</td>
				<td>Subtract memory address <span class="code">xx</span> from the accumulator</td>
			</tr>
			<tr>
				<td><span class="code">3xx</span></td>
				<td class="code">STA</td>
				<td>Store the value of the accumulator at memory address <span class="code">xx</span></td>
			</tr>
			<tr>
				<td><span class="code">5xx</span></td>
				<td class="code">LDA</td>
				<td>Load memory address <span class="code">xx</span> into the accumulator</td>
			</tr>
			<tr>
				<td><span class="code">6xx</span></td>
				<td class="code">BRA</td>
				<td>Set the program counter to the address <span class="code">xx</span></td>
			</tr>
			<tr>
				<td><span class="code">7xx</span></td>
				<td class="code">BRZ</td>
				<td>Set the program counter to the address <span class="code">xx</span> if the accumulator is zero</td>
			</tr>
			<tr>
				<td><span class="code">8xx</span></td>
				<td class="code">BRP</td>
				<td>Set the program counter to the address <span class="code">xx</span> if the accumulator is zero or positive</td>
			</tr>
			<tr>
				<td><span class="code">901</span></td>
				<td class="code">INP</td>
				<td>Wait for input and put it in the accumulator</td>
			</tr>
			<tr>
				<td><span class="code">902</span></td>
				<td class="code">OUT</td>
				<td>Output the value of the accumulator</td>
			</tr>
			<tr>
				<td><span class="code">000</span></td>
				<td class="code">HLT</td>
				<td>Halt the program</td>
			</tr>
			<tr>
				<td class="code"></td>
				<td class="code">DAT</td>
				<td>
					Any other positive integers will be loaded into memory as data.
					They should not be executed as an instruction.
					Recommended to place after the HLT statement to prevent accidental execution.
				</td>
			</tr>
		</table>
	</section>

	<footer>
		<%- include("partials/footer") %>
	</footer>

</body>
</html>
